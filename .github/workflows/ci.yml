name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]
    release:
        types: [published]

jobs:
    lint:
        name: Lint and Code Quality
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install ShellCheck
              run: |
                  sudo apt-get update
                  sudo apt-get install -y shellcheck

            - name: Run lint checks
              run: ./scripts/lint.sh

    test:
        name: Run Tests
        runs-on: ubuntu-latest
        strategy:
            matrix:
                bash-version: ['4.4', '5.0', '5.1']
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Bash ${{ matrix.bash-version }}
              run: |
                  if [ "${{ matrix.bash-version }}" != "$(bash --version | head -n1 | grep -oP '\d+\.\d+')" ]; then
                    echo "Installing Bash ${{ matrix.bash-version }}"
                    # En un entorno real, aquí instalaríamos la versión específica
                  fi

            - name: Install BATS
              run: |
                  git clone https://github.com/bats-core/bats-core.git /tmp/bats-core
                  cd /tmp/bats-core
                  sudo ./install.sh /usr/local

            - name: Install BATS helpers
              run: |
                  # bats-support
                  git clone https://github.com/bats-core/bats-support.git tests/helpers/bats-support
                  # bats-assert
                  git clone https://github.com/bats-core/bats-assert.git tests/helpers/bats-assert
                  # bats-file
                  git clone https://github.com/bats-core/bats-file.git tests/helpers/bats-file

            - name: Run tests
              run: ./tests/run-all-tests.sh

            - name: Upload coverage reports
              uses: codecov/codecov-action@v3
              with:
                  file: ./tests/coverage/coverage.txt
                  flags: unittests
                  name: codecov-umbrella

    build:
        name: Build Distribution
        runs-on: ubuntu-latest
        needs: [lint, test]
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Build single-file distribution
              run: ./scripts/build.sh

            - name: Upload build artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: moodle-backup-cli
                  path: dist/

    release:
        name: Create Release
        runs-on: ubuntu-latest
        needs: [build]
        if: github.event_name == 'release'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download build artifacts
              uses: actions/download-artifact@v3
              with:
                  name: moodle-backup-cli
                  path: dist/

            - name: Upload release assets
              uses: softprops/action-gh-release@v1
              with:
                  files: |
                      dist/moodle-backup-cli
                      dist/moodle-backup-cli.tar.gz
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    security:
        name: Security Scan
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Run security checks
              run: |
                  # Buscar patrones inseguros
                  grep -r "eval\|exec\|system\|\$(\|wget\|curl" src/ lib/ || true
                  # Verificar permisos de archivos
                  find . -type f -perm /u+x -name "*.sh" | while read -r file; do
                    echo "Checking executable: $file"
                  done
