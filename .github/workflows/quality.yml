name: Code Quality

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]

jobs:
    code-quality:
        name: Code Quality Analysis
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install dependencies
              run: |
                  sudo apt-get update
                  sudo apt-get install -y shellcheck bash

            - name: ShellCheck Analysis
              run: |
                  find . -name "*.sh" -type f | xargs shellcheck -f gcc > shellcheck-report.txt || true
                  cat shellcheck-report.txt

            - name: Complexity Analysis
              run: |
                  # An치lisis de complejidad ciclom치tica
                  find . -name "*.sh" -type f | while read -r file; do
                    echo "=== $file ==="
                    # Contar funciones, bucles, condicionales
                    functions=$(grep -c "^[[:space:]]*function\|^[[:space:]]*[a-zA-Z_][a-zA-Z0-9_]*[[:space:]]*(" "$file" || echo 0)
                    loops=$(grep -c "for\|while\|until" "$file" || echo 0)
                    conditions=$(grep -c "if\|case" "$file" || echo 0)
                    lines=$(wc -l < "$file")
                    echo "Lines: $lines, Functions: $functions, Loops: $loops, Conditions: $conditions"
                  done

            - name: Documentation Coverage
              run: |
                  # Verificar documentaci칩n de funciones
                  total_functions=0
                  documented_functions=0
                  find . -name "*.sh" -type f | while read -r file; do
                    # Contar funciones
                    funcs=$(grep -n "^[[:space:]]*function\|^[[:space:]]*[a-zA-Z_][a-zA-Z0-9_]*[[:space:]]*(" "$file" || true)
                    if [ -n "$funcs" ]; then
                      while IFS= read -r func_line; do
                        line_num=$(echo "$func_line" | cut -d: -f1)
                        # Verificar si hay comentario antes de la funci칩n
                        prev_line=$((line_num - 1))
                        if [ $prev_line -gt 0 ]; then
                          comment=$(sed -n "${prev_line}p" "$file" | grep "^[[:space:]]*#" || true)
                          if [ -n "$comment" ]; then
                            documented_functions=$((documented_functions + 1))
                          fi
                        fi
                        total_functions=$((total_functions + 1))
                      done <<< "$funcs"
                    fi
                  done
                  if [ $total_functions -gt 0 ]; then
                    coverage=$((documented_functions * 100 / total_functions))
                    echo "Documentation coverage: $coverage% ($documented_functions/$total_functions)"
                  fi
