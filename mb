#!/bin/bash
# ===================== MOODLE BACKUP - WRAPPER SCRIPT =====================
# Script wrapper para simplificar el uso de moodle_backup.sh
# Permite usar comandos cortos como 'mb', 'mb config', etc.
# Autor: Sistema Moodle Backup
# =====================================================================

# Configuraci√≥n
SCRIPT_NAME="moodle_backup.sh"
SCRIPT_FULL_PATH=""

# Buscar el script principal en ubicaciones comunes
find_main_script() {
    local possible_locations=(
        "/usr/local/bin/moodle-backup"
        "$HOME/bin/moodle-backup"
        "$(dirname "$0")/moodle_backup.sh"
        "./moodle_backup.sh"
        "/usr/local/bin/moodle_backup.sh"
        "$HOME/bin/moodle_backup.sh"
    )
    
    for location in "${possible_locations[@]}"; do
        if [[ -f "$location" ]] && [[ -x "$location" ]]; then
            SCRIPT_FULL_PATH="$location"
            return 0
        fi
    done
    
    echo "‚ùå Error: No se encontr√≥ moodle_backup.sh en ubicaciones conocidas"
    echo "Ubicaciones verificadas:"
    printf "  - %s\n" "${possible_locations[@]}"
    exit 1
}

# Mostrar ayuda del wrapper
show_wrapper_help() {
    cat << 'EOF'
üöÄ MOODLE BACKUP V3 - WRAPPER SCRIPT

USO: mb [COMANDO]

COMANDOS PRINCIPALES:
  mb                    Ejecutar backup en segundo plano (recomendado)
  mb interactive        Ejecutar backup en primer plano (modo interactivo)
  mb config             Ver configuraci√≥n actual
  mb test               Probar conectividad y configuraci√≥n
  mb help               Ver ayuda completa del script principal
  mb diagnose           Diagn√≥stico del sistema
  mb version            Ver versi√≥n del sistema

COMANDOS DE MONITOREO:
  mb status             Estado del √∫ltimo backup
  mb logs               Ver logs recientes  
  mb clean              Limpiar archivos temporales antiguos

OPCIONES AVANZADAS (compatibilidad completa):
  mb --help             Ayuda completa con todas las opciones
  mb --diagnose         Diagn√≥sticos avanzados del sistema
  mb --test-rclone      Prueba espec√≠fica de Google Drive
  mb --show-config      Configuraci√≥n con validaci√≥n completa

EJEMPLOS:
  mb                              # Backup en segundo plano (recomendado)
  mb interactive                  # Backup en primer plano
  mb config                       # Ver configuraci√≥n
  mb test                         # Probar conectividad
  mb logs                         # Ver logs recientes
  mb status                       # Estado del proceso
  
CONFIGURACI√ìN FLEXIBLE:
  PANEL_TYPE=plesk mb config          # Forzar tipo de panel
  REQUIRE_CONFIG=false mb config      # Permitir auto-detecci√≥n
  CLIENT_NAME=test mb                 # Backup con nombre espec√≠fico

MONITOREO AVANZADO:
  mb logs 50                          # Ver m√°s l√≠neas de log
  tail -f /var/log/moodle_backup.log  # Seguimiento en tiempo real
  
EJECUCI√ìN EN SEGUNDO PLANO:
  Por defecto, 'mb' ejecuta el backup en segundo plano usando nohup.
  Esto permite que contin√∫e aunque cierre la sesi√≥n SSH.
  Use 'mb interactive' si necesita ver la salida en tiempo real.

Para ayuda completa del script principal: mb help
EOF
}

# Funci√≥n para mostrar logs recientes
show_recent_logs() {
    local log_file="/var/log/moodle_backup.log"
    local lines="${1:-30}"
    
    echo "=== LOGS RECIENTES (√∫ltimas $lines l√≠neas) ==="
    echo ""
    
    if [[ -f "$log_file" ]]; then
        # Verificar si hay proceso en ejecuci√≥n para ofrecer seguimiento
        if [[ -f /tmp/moodle_backup_last_pid ]]; then
            local last_pid=$(cat /tmp/moodle_backup_last_pid)
            if ps -p "$last_pid" >/dev/null 2>&1; then
                echo "üîÑ Proceso activo detectado (PID: $last_pid)"
                echo "üí° Para seguimiento en tiempo real: tail -f $log_file"
                echo ""
            fi
        fi
        
        tail -n "$lines" "$log_file"
        echo ""
        echo "üí° Comandos √∫tiles:"
        echo "   tail -f $log_file                    # Seguimiento en tiempo real"
        echo "   mb logs 50                           # Ver m√°s l√≠neas"
        echo "   grep ERROR $log_file                 # Solo errores"
        
    else
        echo "‚ö†Ô∏è No se encontr√≥ archivo de log en: $log_file"
        echo ""
        echo "Posibles ubicaciones alternativas:"
        for alt_log in "/tmp/moodle_backup*.log" "/var/log/moodle*.log"; do
            if ls $alt_log >/dev/null 2>&1; then
                echo "  üìÅ Encontrado: $alt_log"
            fi
        done
    fi
}

# Funci√≥n para limpiar archivos temporales
clean_temp_files() {
    local tmp_patterns=(
        "/tmp/moodle_backup*"
        "/tmp/backup_*"
        "/var/tmp/moodle_backup*"
    )
    
    echo "üßπ Limpiando archivos temporales antiguos..."
    
    for pattern in "${tmp_patterns[@]}"; do
        # Eliminar archivos m√°s antiguos de 7 d√≠as
        find $(dirname "$pattern") -name "$(basename "$pattern")" -mtime +7 -type f 2>/dev/null | while read -r file; do
            echo "  Eliminando: $file"
            rm -f "$file"
        done
    done
    
    echo "‚úÖ Limpieza completada"
}

# Funci√≥n para mostrar estado del √∫ltimo backup
show_backup_status() {
    local log_file="/var/log/moodle_backup.log"
    
    echo "=== ESTADO DEL BACKUP MOODLE ==="
    
    # Verificar proceso en ejecuci√≥n
    if [[ -f /tmp/moodle_backup_last_pid ]]; then
        local last_pid=$(cat /tmp/moodle_backup_last_pid)
        if ps -p "$last_pid" >/dev/null 2>&1; then
            echo "üîÑ PROCESO ACTIVO:"
            echo "   PID: $last_pid"
            echo "   Estado: Ejecut√°ndose en segundo plano"
            echo "   Comando: $(ps -p "$last_pid" -o comm= 2>/dev/null)"
            echo ""
        else
            echo "‚èπÔ∏è  √öltimo proceso completado (PID: $last_pid)"
            echo ""
        fi
    fi
    
    if [[ -f "$log_file" ]]; then
        # Buscar la √∫ltima ejecuci√≥n exitosa
        local last_success=$(grep "‚úÖ.*completado exitosamente" "$log_file" | tail -1)
        local last_error=$(grep "‚ùå\|ERROR" "$log_file" | tail -1)
        local last_start=$(grep "INICIANDO BACKUP" "$log_file" | tail -1)
        
        if [[ -n "$last_start" ]]; then
            echo "üöÄ √öltima ejecuci√≥n iniciada:"
            echo "   $last_start"
            echo ""
        fi
        
        if [[ -n "$last_success" ]]; then
            echo "‚úÖ √öltimo backup exitoso:"
            echo "   $last_success"
            echo ""
        fi
        
        if [[ -n "$last_error" ]]; then
            echo "‚ùå √öltimo error detectado:"
            echo "   $last_error"
            echo ""
        fi
        
        # Verificar archivos temporales
        if ls /tmp/moodle_backup* >/dev/null 2>&1; then
            echo "üìÅ Archivos temporales encontrados:"
            ls -lah /tmp/moodle_backup* 2>/dev/null | head -5
            echo ""
        fi
        
        # Mostrar √∫ltimas l√≠neas del log
        echo "üìã √öltimas 5 l√≠neas del log:"
        tail -5 "$log_file" | sed 's/^/   /'
        
    else
        echo "‚ö†Ô∏è No se encontr√≥ archivo de log"
        echo "El backup a√∫n no se ha ejecutado o LOG_FILE no est√° configurado"
    fi
}

# Funci√≥n principal
main() {
    # Buscar script principal
    find_main_script
    
    local command="${1:-run}"
    
    case "$command" in
        # Comando por defecto - ejecutar backup en segundo plano
        ""|"run")
            echo "üöÄ Iniciando backup de Moodle en segundo plano..."
            echo "üìã Logs del proceso: /var/log/moodle_backup.log"
            echo "üìã Logs de sesi√≥n: /tmp/moodle_backup_session_*.log"
            echo ""
            echo "üí° Para monitorear el progreso use:"
            echo "   mb logs     - Ver logs recientes"
            echo "   mb status   - Estado del backup"
            echo ""
            
            # Ejecutar en segundo plano con nohup
            nohup "$SCRIPT_FULL_PATH" > /tmp/moodle_backup_wrapper_$(date +%s).log 2>&1 &
            local backup_pid=$!
            
            echo "‚úÖ Backup iniciado en segundo plano (PID: $backup_pid)"
            echo "üîç El proceso continuar√° aunque cierre la sesi√≥n SSH"
            echo ""
            echo "Comandos √∫tiles:"
            echo "  mb logs     # Ver progreso en tiempo real"
            echo "  mb status   # Estado actual"
            echo "  ps -p $backup_pid  # Verificar si el proceso sigue ejecut√°ndose"
            
            # Guardar PID para referencia
            echo "$backup_pid" > /tmp/moodle_backup_last_pid
            ;;
            
        # Comando interactivo - ejecutar en primer plano
        "interactive"|"foreground"|"fg")
            echo "üîÑ Ejecutando backup en modo interactivo (primer plano)..."
            echo "‚ö†Ô∏è NOTA: El proceso se detendr√° si cierra la sesi√≥n SSH"
            echo ""
            exec "$SCRIPT_FULL_PATH"
            ;;
            
        # Comandos simples del wrapper (sin dash)
        "config")
            exec "$SCRIPT_FULL_PATH" --show-config
            ;;
        "test")
            exec "$SCRIPT_FULL_PATH" --test-rclone
            ;;
        "help")
            exec "$SCRIPT_FULL_PATH" --help
            ;;
        "diagnose")
            exec "$SCRIPT_FULL_PATH" --diagnose
            ;;
        "version")
            echo "üöÄ Moodle Backup V3 - Script Universal Multi-Panel"
            echo "üìç Ubicaci√≥n: $SCRIPT_FULL_PATH"
            if [[ -f "$SCRIPT_FULL_PATH" ]]; then
                echo "üìÖ $(grep "^# Fecha:" "$SCRIPT_FULL_PATH" | head -1 || echo "Fecha: No especificada")"
                echo "üë§ $(grep "^# Autor:" "$SCRIPT_FULL_PATH" | head -1 || echo "Autor: Sistema Moodle Backup")"
                echo "üîß $(grep "^# Versi√≥n:" "$SCRIPT_FULL_PATH" | head -1 || echo "Versi√≥n: 3.0")"
            fi
            ;;
        "status")
            show_backup_status
            ;;
        "logs")
            # Permitir especificar n√∫mero de l√≠neas
            local lines="${2:-30}"
            show_recent_logs "$lines"
            ;;
        "clean")
            clean_temp_files
            ;;
            
        # Opciones avanzadas (con dash para compatibilidad)
        "--help"|"-h")
            exec "$SCRIPT_FULL_PATH" --help
            ;;
        "--show-config")
            exec "$SCRIPT_FULL_PATH" --show-config
            ;;
        "--test"|"--test-rclone")
            exec "$SCRIPT_FULL_PATH" --test-rclone
            ;;
        "--diagnose")
            exec "$SCRIPT_FULL_PATH" --diagnose
            ;;
        "--version")
            echo "üöÄ Moodle Backup V3 - Script Universal Multi-Panel"
            echo "üìç Ubicaci√≥n: $SCRIPT_FULL_PATH"
            if [[ -f "$SCRIPT_FULL_PATH" ]]; then
                echo "üìÖ $(grep "^# Fecha:" "$SCRIPT_FULL_PATH" | head -1 || echo "Fecha: No especificada")"
                echo "üë§ $(grep "^# Autor:" "$SCRIPT_FULL_PATH" | head -1 || echo "Autor: Sistema Moodle Backup")"
                echo "üîß $(grep "^# Versi√≥n:" "$SCRIPT_FULL_PATH" | head -1 || echo "Versi√≥n: 3.0")"
            fi
            ;;
            
        # Comandos especiales del wrapper
        "wrapper-help")
            show_wrapper_help
            ;;
            
        # Comando desconocido
        *)
            echo "‚ùå Comando desconocido: $command"
            echo ""
            show_wrapper_help
            exit 1
            ;;
    esac
}

# Ejecutar funci√≥n principal con todos los argumentos
main "$@"
