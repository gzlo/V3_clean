#!/usr/bin/env bash

# Mock para comando mysqldump
# Simula el comportamiento de mysqldump para tests

# Variables de configuración del mock
MOCK_FAIL=${MOCK_MYSQLDUMP_FAIL:-0}
MOCK_OUTPUT_FILE=${MOCK_MYSQLDUMP_OUTPUT:-""}
MOCK_DELAY=${MOCK_MYSQLDUMP_DELAY:-0}

# Función para mostrar ayuda
show_help() {
    cat << EOF
mock mysqldump - Simulación de mysqldump para tests

Uso: mysqldump [OPCIONES] [base_de_datos [tabla...]]

Opciones principales:
  --single-transaction    Usar transacción única
  --routines             Incluir rutinas almacenadas
  --triggers             Incluir triggers
  -h, --host=nombre      Conectar al host
  -u, --user=nombre      Usuario para login
  -p, --password         Solicitar password
  --result-file=archivo  Archivo de salida

Variables de entorno para controlar el mock:
  MOCK_MYSQLDUMP_FAIL=1     Simular fallo
  MOCK_MYSQLDUMP_OUTPUT=file  Archivo donde escribir output
  MOCK_MYSQLDUMP_DELAY=n    Delay en segundos
EOF
}

# Función principal
main() {
    local database=""
    local output_file=""
    local user=""
    local host=""
    local password=""
    
    # Parsear argumentos básicos
    while [[ $# -gt 0 ]]; do
        case $1 in
            --help|-h)
                show_help
                exit 0
                ;;
            --result-file=*)
                output_file="${1#*=}"
                ;;
            --user=*|-u)
                if [[ "$1" == *"="* ]]; then
                    user="${1#*=}"
                else
                    shift
                    user="$1"
                fi
                ;;
            --host=*)
                host="${1#*=}"
                ;;
            -p|--password)
                password="prompted"
                ;;
            --single-transaction|--routines|--triggers)
                # Ignorar estas opciones en el mock
                ;;
            -*)
                # Ignorar otras opciones
                ;;
            *)
                # Primer argumento sin - es la base de datos
                if [[ -z "$database" ]]; then
                    database="$1"
                fi
                ;;
        esac
        shift
    done
    
    # Simular delay si está configurado
    if [[ $MOCK_DELAY -gt 0 ]]; then
        sleep "$MOCK_DELAY"
    fi
    
    # Simular fallo si está configurado
    if [[ $MOCK_FAIL -eq 1 ]]; then
        echo "mysqldump: [ERROR] Access denied for user '$user'@'$host'" >&2
        exit 1
    fi
    
    # Generar output simulado
    local target_file="${output_file:-${MOCK_OUTPUT_FILE:-/dev/stdout}}"
    
    cat > "$target_file" << EOF
-- MySQL dump 10.13  Distrib 8.0.33, for Linux (x86_64)
--
-- Host: ${host:-localhost}    Database: ${database:-test_db}
-- ------------------------------------------------------
-- Server version	8.0.33

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;

--
-- Dumping data for table \`mdl_users\`
--

INSERT INTO \`mdl_users\` VALUES (1,'admin','$2y$10\$mock_hash','Admin','User','admin@example.com');
INSERT INTO \`mdl_users\` VALUES (2,'testuser','$2y$10\$mock_hash2','Test','User','test@example.com');

--
-- Dumping data for table \`mdl_courses\`
--

INSERT INTO \`mdl_courses\` VALUES (1,'Test Course 1','Course description',1234567890);
INSERT INTO \`mdl_courses\` VALUES (2,'Test Course 2','Another course',1234567891);

-- Dump completed on $(date)
EOF
    
    echo "Mock mysqldump completed successfully for database: ${database:-unknown}" >&2
    exit 0
}

# Ejecutar función principal
main "$@"
