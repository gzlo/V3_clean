#!/usr/bin/env bash
# ============================================================================
# Test Helper - Funciones comunes para todos los tests
# ============================================================================

# Obtener el directorio base de tests
if [[ -z "${BATS_TEST_DIRNAME:-}" ]]; then
    TEST_BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
else
    TEST_BASE_DIR="$(cd "${BATS_TEST_DIRNAME}/.." && pwd)"
fi

# Variables globales para tests
export PROJECT_ROOT="$(cd "$TEST_BASE_DIR/.." && pwd)"
export TEST_TEMP_DIR="${BATS_TMPDIR:-/tmp}/moodle-backup-test-$$"

# Crear directorio temporal si no existe
mkdir -p "$TEST_TEMP_DIR"

# Funciones de utilidad para tests
setup_test_environment() {
    # Configurar variables de entorno para tests
    export MOODLE_CLI_ROOT="$PROJECT_ROOT"
    export MOODLE_CLI_TEST_MODE="true"
    export MOODLE_CLI_LOG_LEVEL="ERROR"
    
    # Crear directorio temporal específico para este test
    if [[ -n "${BATS_TEST_NAME:-}" ]]; then
        local test_temp_dir="$TEST_TEMP_DIR/$(echo "$BATS_TEST_NAME" | tr ' :/' '_')"
        mkdir -p "$test_temp_dir"
        export TEST_CURRENT_TEMP_DIR="$test_temp_dir"
    fi
}

cleanup_test_environment() {
    # Limpiar archivos temporales específicos del test
    if [[ -n "${TEST_CURRENT_TEMP_DIR:-}" && -d "$TEST_CURRENT_TEMP_DIR" ]]; then
        rm -rf "$TEST_CURRENT_TEMP_DIR"
        unset TEST_CURRENT_TEMP_DIR
    fi
    
    # Limpiar variables de entorno
    unset MOODLE_CLI_TEST_MODE
    unset MOODLE_CLI_LOG_LEVEL
}

# Función para crear archivos temporales de prueba
create_test_file() {
    local filename="$1"
    local content="$2"
    local test_file="$TEST_CURRENT_TEMP_DIR/$filename"
    
    mkdir -p "$(dirname "$test_file")"
    echo "$content" > "$test_file"
    echo "$test_file"
}

# Función para crear directorios de prueba
create_test_dir() {
    local dirname="$1"
    local test_dir="$TEST_CURRENT_TEMP_DIR/$dirname"
    
    mkdir -p "$test_dir"
    echo "$test_dir"
}

# Función para verificar si un comando está disponible
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Función para skip si una dependencia no está disponible
skip_if_missing() {
    local cmd="$1"
    local message="${2:-$cmd no está disponible}"
    
    if ! command_exists "$cmd"; then
        skip "$message"
    fi
}

# Función para verificar archivos en el proyecto
assert_file_exists() {
    local file="$1"
    if [[ ! -f "$file" ]]; then
        echo "ERROR: Archivo requerido no encontrado: $file" >&2
        return 1
    fi
}

# Función para verificar directorios en el proyecto
assert_dir_exists() {
    local dir="$1"
    if [[ ! -d "$dir" ]]; then
        echo "ERROR: Directorio requerido no encontrado: $dir" >&2
        return 1
    fi
}

# Función para generar contenido de archivo de configuración de prueba
generate_test_config() {
    cat << 'EOF'
# Configuración de prueba
BACKUP_DIR="/tmp/test-backup"
LOG_LEVEL="INFO"
VERBOSE="false"
DRY_RUN="false"
EOF
}

# Función para generar script de prueba básico
generate_test_script() {
    local script_name="${1:-test-script.sh}"
    cat << 'EOF'
#!/bin/bash
echo "Test script ejecutado"
exit 0
EOF
}

# Función para simular entorno de Moodle
setup_mock_moodle_environment() {
    local moodle_dir="$1"
    
    mkdir -p "$moodle_dir"/{config,admin,course,mod,theme,lib}
    
    # Crear config.php simulado
    cat > "$moodle_dir/config.php" << 'EOF'
<?php
$CFG = new stdClass();
$CFG->dbtype = 'mysqli';
$CFG->dblibrary = 'native';
$CFG->dbhost = 'localhost';
$CFG->dbname = 'moodle_test';
$CFG->dbuser = 'moodle_user';
$CFG->dbpass = 'password';
$CFG->prefix = 'mdl_';
$CFG->dboptions = array();
$CFG->wwwroot = 'http://test.moodle.local';
$CFG->dataroot = '/tmp/moodledata_test';
$CFG->directorypermissions = 02777;
require_once(__DIR__ . '/lib/setup.php');
EOF

    # Crear version.php simulado
    cat > "$moodle_dir/version.php" << 'EOF'
<?php
defined('MOODLE_INTERNAL') || die();
$version  = 2023100900;
$release  = '4.3+ (Build: 20231009)';
$branch   = '403';
$maturity = MATURITY_STABLE;
EOF

    echo "$moodle_dir"
}

# Función para limpiar entorno mock
cleanup_mock_environment() {
    local mock_dir="$1"
    if [[ -n "$mock_dir" && -d "$mock_dir" ]]; then
        rm -rf "$mock_dir"
    fi
}

# Auto-setup para la mayoría de tests
if [[ "${BATS_TEST_DIRNAME:-}" ]]; then
    setup_test_environment
fi
