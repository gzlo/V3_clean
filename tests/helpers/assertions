#!/usr/bin/env bash
# ============================================================================
# Assertions Helper - Funciones de aserción personalizadas para tests
# ============================================================================

# Función para assert que un comando tiene éxito
assert_success() {
    if [[ "$status" -ne 0 ]]; then
        echo "Esperado: código de salida 0"
        echo "Actual: código de salida $status"
        if [[ -n "${output:-}" ]]; then
            echo "Output:"
            echo "$output"
        fi
        return 1
    fi
}

# Función para assert que un comando falla
assert_failure() {
    if [[ "$status" -eq 0 ]]; then
        echo "Esperado: código de salida diferente de 0"
        echo "Actual: código de salida $status"
        if [[ -n "${output:-}" ]]; then
            echo "Output:"
            echo "$output"
        fi
        return 1
    fi
}

# Función para assert output contiene texto
assert_output() {
    local expected
    if [[ $# -eq 0 ]]; then
        echo "assert_output requiere al menos un argumento"
        return 1
    fi
    
    case "$1" in
        --partial)
            shift
            expected="$1"
            if [[ "${output:-}" != *"$expected"* ]]; then
                echo "Esperado output conteniendo: '$expected'"
                echo "Actual output:"
                echo "${output:-}"
                return 1
            fi
            ;;
        --regex)
            shift
            expected="$1"
            if [[ ! "${output:-}" =~ $expected ]]; then
                echo "Esperado output matching regex: '$expected'"
                echo "Actual output:"
                echo "${output:-}"
                return 1
            fi
            ;;
        *)
            expected="$1"
            if [[ "${output:-}" != "$expected" ]]; then
                echo "Esperado output exacto:"
                echo "'$expected'"
                echo "Actual output:"
                echo "'${output:-}'"
                return 1
            fi
            ;;
    esac
}

# Función para assert que output está vacío
assert_output_empty() {
    if [[ -n "${output:-}" ]]; then
        echo "Esperado: output vacío"
        echo "Actual output:"
        echo "'$output'"
        return 1
    fi
}

# Función para assert que una línea específica contiene texto
assert_line() {
    local line_number="$1"
    local expected="$2"
    
    if [[ -z "$line_number" || -z "$expected" ]]; then
        echo "assert_line requiere número de línea y texto esperado"
        return 1
    fi
    
    # Convertir output en array de líneas
    local -a lines
    mapfile -t lines <<< "$output"
    
    if [[ "$line_number" -ge "${#lines[@]}" ]]; then
        echo "Línea $line_number no existe en output (total: ${#lines[@]} líneas)"
        echo "Output completo:"
        echo "$output"
        return 1
    fi
    
    local actual_line="${lines[$line_number]}"
    if [[ "$actual_line" != *"$expected"* ]]; then
        echo "Línea $line_number no contiene texto esperado"
        echo "Esperado: conteniendo '$expected'"
        echo "Actual: '$actual_line'"
        return 1
    fi
}

# Función para assert que una variable está definida
assert_variable_set() {
    local var_name="$1"
    local var_value
    
    if [[ -z "$var_name" ]]; then
        echo "assert_variable_set requiere nombre de variable"
        return 1
    fi
    
    # Usar referencia indirecta para obtener el valor
    var_value="${!var_name:-}"
    
    if [[ -z "$var_value" ]]; then
        echo "Variable '$var_name' no está definida o está vacía"
        return 1
    fi
}

# Función para assert que una variable no está definida
assert_variable_unset() {
    local var_name="$1"
    local var_value
    
    if [[ -z "$var_name" ]]; then
        echo "assert_variable_unset requiere nombre de variable"
        return 1
    fi
    
    # Usar referencia indirecta para obtener el valor
    var_value="${!var_name:-}"
    
    if [[ -n "$var_value" ]]; then
        echo "Variable '$var_name' está definida con valor: '$var_value'"
        return 1
    fi
}

# Función para assert que una variable tiene un valor específico
assert_variable_equals() {
    local var_name="$1"
    local expected_value="$2"
    local actual_value
    
    if [[ -z "$var_name" || -z "$expected_value" ]]; then
        echo "assert_variable_equals requiere nombre de variable y valor esperado"
        return 1
    fi
    
    # Usar referencia indirecta para obtener el valor
    actual_value="${!var_name:-}"
    
    if [[ "$actual_value" != "$expected_value" ]]; then
        echo "Variable '$var_name' no tiene el valor esperado"
        echo "Esperado: '$expected_value'"
        echo "Actual: '$actual_value'"
        return 1
    fi
}

# Función para assert que un archivo existe
assert_file_exists() {
    local file_path="$1"
    
    if [[ -z "$file_path" ]]; then
        echo "assert_file_exists requiere ruta de archivo"
        return 1
    fi
    
    if [[ ! -f "$file_path" ]]; then
        echo "Archivo no existe: '$file_path'"
        return 1
    fi
}

# Función para assert que un archivo no existe
assert_file_not_exists() {
    local file_path="$1"
    
    if [[ -z "$file_path" ]]; then
        echo "assert_file_not_exists requiere ruta de archivo"
        return 1
    fi
    
    if [[ -f "$file_path" ]]; then
        echo "Archivo existe pero no debería: '$file_path'"
        return 1
    fi
}

# Función para assert que un directorio existe
assert_dir_exists() {
    local dir_path="$1"
    
    if [[ -z "$dir_path" ]]; then
        echo "assert_dir_exists requiere ruta de directorio"
        return 1
    fi
    
    if [[ ! -d "$dir_path" ]]; then
        echo "Directorio no existe: '$dir_path'"
        return 1
    fi
}

# Función para assert que un directorio no existe
assert_dir_not_exists() {
    local dir_path="$1"
    
    if [[ -z "$dir_path" ]]; then
        echo "assert_dir_not_exists requiere ruta de directorio"
        return 1
    fi
    
    if [[ -d "$dir_path" ]]; then
        echo "Directorio existe pero no debería: '$dir_path'"
        return 1
    fi
}

# Función para assert que un archivo contiene texto específico
assert_file_contains() {
    local file_path="$1"
    local expected_text="$2"
    
    if [[ -z "$file_path" || -z "$expected_text" ]]; then
        echo "assert_file_contains requiere ruta de archivo y texto esperado"
        return 1
    fi
    
    if [[ ! -f "$file_path" ]]; then
        echo "Archivo no existe: '$file_path'"
        return 1
    fi
    
    if ! grep -q "$expected_text" "$file_path"; then
        echo "Archivo '$file_path' no contiene texto esperado: '$expected_text'"
        echo "Contenido del archivo:"
        cat "$file_path"
        return 1
    fi
}

# Función para assert que un comando existe
assert_command_exists() {
    local command_name="$1"
    
    if [[ -z "$command_name" ]]; then
        echo "assert_command_exists requiere nombre de comando"
        return 1
    fi
    
    if ! command -v "$command_name" >/dev/null 2>&1; then
        echo "Comando no encontrado: '$command_name'"
        return 1
    fi
}

# Función para assert que un comando no existe
assert_command_not_exists() {
    local command_name="$1"
    
    if [[ -z "$command_name" ]]; then
        echo "assert_command_not_exists requiere nombre de comando"
        return 1
    fi
    
    if command -v "$command_name" >/dev/null 2>&1; then
        echo "Comando encontrado pero no debería existir: '$command_name'"
        return 1
    fi
}

# Función para assert que dos valores son iguales
assert_equal() {
    local expected="$1"
    local actual="$2"
    
    if [[ "$actual" != "$expected" ]]; then
        echo "Los valores no son iguales"
        echo "Esperado: '$expected'"
        echo "Actual: '$actual'"
        return 1
    fi
}

# Función para assert que dos valores no son iguales
assert_not_equal() {
    local not_expected="$1"
    local actual="$2"
    
    if [[ "$actual" == "$not_expected" ]]; then
        echo "Los valores son iguales pero no deberían serlo"
        echo "Valor: '$actual'"
        return 1
    fi
}
