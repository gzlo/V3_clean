#!/bin/bash
# =============================================================================
# Script de Pruebas para Moodle Backup V3
# Ejecuta validaciones y pruebas sin afectar sistemas de producci√≥n
# =============================================================================

set -euo pipefail

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $*${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $*${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $*${NC}"; }
log_error() { echo -e "${RED}‚ùå $*${NC}"; }

echo "üß™ INICIANDO PRUEBAS MOODLE BACKUP V3"
echo "======================================"

# Verificar sintaxis de scripts principales
echo ""
echo "1. VERIFICACI√ìN DE SINTAXIS"
echo "---------------------------"

scripts_to_check=(
    "../install-interactive.sh"
    "../moodle_backup.sh"
    "../mb"
    "../install.sh"
)

syntax_errors=0
for script in "${scripts_to_check[@]}"; do
    if [[ -f "$script" ]]; then
        if bash -n "$script" 2>/dev/null; then
            log_success "Sintaxis OK: $(basename "$script")"
        else
            log_error "Error de sintaxis: $(basename "$script")"
            ((syntax_errors++))
        fi
    else
        log_warning "Script no encontrado: $script"
    fi
done

# Verificar archivos de configuraci√≥n
echo ""
echo "2. VERIFICACI√ìN DE ARCHIVOS DE CONFIGURACI√ìN"
echo "--------------------------------------------"

config_files=(
    "moodle_backup.conf.example"
    "test-config.conf"
)

for config in "${config_files[@]}"; do
    if [[ -f "$config" ]]; then
        log_success "Config encontrado: $config"
    else
        log_warning "Config no encontrado: $config"
    fi
done

# NUEVO: Ejecutar test de parsing de config.php
echo ""
echo "3. TEST DE PARSING DE CONFIG.PHP"
echo "--------------------------------"

if [[ -f "test-moodle-config-parsing.sh" ]]; then
    log_info "Ejecutando test de parsing de config.php..."
    if bash test-moodle-config-parsing.sh; then
        log_success "Test de parsing de config.php completado exitosamente"
    else
        log_error "Test de parsing de config.php fall√≥"
        ((syntax_errors++))
    fi
else
    log_warning "Test de parsing no encontrado: test-moodle-config-parsing.sh"
fi

# Ejecutar otros tests existentes
echo ""
echo "4. TESTS ADICIONALES"
echo "-------------------"

# Test de mejoras
if [[ -f "test-mejoras.sh" ]]; then
    log_info "Ejecutando test de mejoras..."
    if bash test-mejoras.sh; then
        log_success "Test de mejoras completado"
    else
        log_warning "Test de mejoras fall√≥ (no cr√≠tico)"
    fi
fi

# Test de UI improvements
if [[ -f "test-ui-improvements.sh" ]]; then
    log_info "Ejecutando test de UI improvements..."
    if bash test-ui-improvements.sh; then
        log_success "Test de UI improvements completado"
    else
        log_warning "Test de UI improvements fall√≥ (no cr√≠tico)"
    fi
fi

# Prueba de asignaci√≥n de variables (funci√≥n cr√≠tica corregida)
echo ""
echo "5. PRUEBA DE ASIGNACI√ìN DE VARIABLES"
echo "------------------------------------"

test_variable_assignment() {
    local variable_name="$1"
    local test_value="$2"
    
    # M√©todo robusto implementado en las correcciones
    declare -g "$variable_name"="$test_value" 2>/dev/null || true
    eval "$variable_name=\"$test_value\""
    
    # Verificar que la asignaci√≥n funcion√≥
    if eval "test \"\${${variable_name}:-}\" = \"$test_value\""; then
        log_success "Variable $variable_name asignada correctamente"
        return 0
    else
        log_error "Error al asignar $variable_name"
        return 1
    fi
}

# Ejecutar pruebas de variables
test_variable_assignment "TEST_CLIENT_NAME" "dev4hc"
test_variable_assignment "TEST_PANEL_TYPE" "cpanel"
test_variable_assignment "TEST_AUTO_DETECT" "true"

# Verificar estructura de directorios esperada
echo ""
echo "6. VERIFICACI√ìN DE ESTRUCTURA"
echo "------------------------------"

required_files=(
    "../install-interactive.sh"
    "../moodle_backup.sh"
    "../mb"
    "../README.md"
    "../CHANGELOG.md"
    "../moodle_backup.conf.example"
)

missing_files=0
for file in "${required_files[@]}"; do
    if [[ -f "$file" ]]; then
        log_success "Archivo encontrado: $(basename "$file")"
    else
        log_error "Archivo faltante: $(basename "$file")"
        ((missing_files++))
    fi
done

# Prueba de configuraci√≥n con archivo de test
echo ""
echo "7. PRUEBA CON CONFIGURACI√ìN DE TEST"
echo "------------------------------------"

if [[ -f "test-config.conf" ]]; then
    log_info "Verificando configuraci√≥n de prueba..."
    
    # Simular carga de configuraci√≥n
    source test-config.conf 2>/dev/null || true
    
    if [[ -n "${CLIENT_NAME:-}" ]] && [[ -n "${NOTIFICATION_EMAILS_EXTRA:-}" ]]; then
        log_success "Configuraci√≥n de test cargada: CLIENT_NAME=$CLIENT_NAME"
    else
        log_error "Error al cargar configuraci√≥n de test"
    fi
else
    log_error "Archivo test-config.conf no encontrado"
fi

# Resumen de pruebas
echo ""
echo "üìä RESUMEN DE PRUEBAS"
echo "====================="

total_errors=$((syntax_errors + missing_files))

if [[ $total_errors -eq 0 ]]; then
    log_success "‚úÖ TODAS LAS PRUEBAS PASARON"
    echo ""
    echo "El sistema est√° listo para uso en producci√≥n."
    exit 0
else
    log_error "‚ùå SE ENCONTRARON $total_errors ERRORES"
    echo ""
    echo "Corregir errores antes de usar en producci√≥n."
    exit 1
fi
